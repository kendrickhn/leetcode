from math import comb
MOD = 10**9 + 7

class Solution:
    def idealArrays(self, n: int, maxValue: int) -> int:
        # Precompute all chains by divisors
        from collections import defaultdict

        dp = [defaultdict(int) for _ in range(15)]  # up to 14 length chains are enough
        for i in range(1, maxValue + 1):
            dp[1][i] = 1

        for length in range(1, 14):  # max chain length ~ log(maxValue)
            for val in dp[length]:
                for mul in range(2 * val, maxValue + 1, val):
                    dp[length + 1][mul] += dp[length][val]

        # Precompute combinations
        C = [[0] * (15) for _ in range(n + 1)]
        for i in range(n + 1):
            for j in range(min(15, i + 1)):
                C[i][j] = comb(i, j) % MOD

        # For each chain length, compute total sequences
        res = 0
        for length in range(1, 15):
            total = sum(dp[length].values()) % MOD
            res = (res + total * C[n - 1][length - 1]) % MOD

        return res
